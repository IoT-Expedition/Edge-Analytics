{
  "name": "Edge-analytics",
  "tagline": "",
  "body": "# Leveraging Edge-Analytics in IoT\r\n\r\n*Knocking demo using the Giotto Stack.*\r\n\r\n---\r\nThis is an open source application built on top of the GIoTTO stack to showcase how an IoT app can leverage the stack functionality to offer advanced features and complex interactions between multiple IoT entities. It also demonstrates how Edge Analytics reduces the end-to-end time required for IoT scenarios. The schematic diagram of the application is shown in Figure 1. \r\n\r\n![Schemaic diagram of the knocking app.](https://github.com/IoT-Expedition/Edge-Analytics/blob/master/architecture.jpg)\r\n\r\n# Required Devices\r\n+ [TI sensor tag] (http://www.ti.com/tool/cc2541dk-sensor)\r\n+ [Raspberry PI] (https://www.raspberrypi.org/blog/raspberry-pi-3-on-sale/)\r\n+ IP camera\r\n+ Internet connection\r\n\r\n# Configuration file\r\nThe [knocking.conf] (./knocking.conf) file holds the configurations required for the demo:\r\n+ camera_ip, the IoT camera IP in IPv4 format 0.0.0.0\r\n+ BD_domain, url for buildingdepot\r\n+ base_url, service url @ buildingdepot\r\n+ res, checing resosultion, how frequent to check on the sensor data\r\n+ knockingSensor_uuid, where knocking sensor posts time-series data\r\n+ postSensor_uuid, where google cards information are posted\r\n\r\n# GIoTTO stack installation\r\nThe entire GIoTTO stack can be downloaded [here](http://cmu.buildingdepot.org/BuildingDepot.tar.gz). For full description, installation guide and API documentation, please refer to the BuildingDepot [webpage] (http://buildingdepot.andrew.cmu.edu/). Once installation is complete, you need to register with the platform and create a username and password. Use the registration credentials to login to the system and create 2 snesor IDs: ```knockingSensor_uuid``` to store the knocking sensor times series data and ```postSensor_uuid``` to post the Google Now card information. Copy the generated uuids of both sensors to respective lines in the [knocking.conf] (./knocking.conf).\r\n\r\n# Setting up the knocking virtual sensor\r\nThe TI sensor tag is used to detect the knocking signal. The current version of the TI sensor tag can communicate only through BLE. Therefore, you need a gateway to commuincate the data generated by the sensor to the platfrom. As such, we use a Raspberry PI as a gateway. The mac address of the TI sensor tag is a constant in the file [virtualSensorMonitor.py](./virtual_sensor/virtualSensorMonitor.py) as ``` DEFAULT_MAC_ADDRESS = \"replace-with-your-sensor-mac-address\" ```. Make sure that the raspberry pi is connected to the Internet. We also need to translate the raw sensor data generated by the TI sensor resulting from the knocking signal into a meangful semantic infomration (e.g., knoking or silent). The machine leanring script in the [virtual_sensor](./virtual_sensor) folder creates the required virtual sensor and post either \"knocking\" or \"silent\" to knockingSensor_uuid.\r\n\r\n# Face recognition installation\r\nThis demo uses OpenFace for face detection. OpenFace is a Python and Torch implementation of face recognition with deep neural networks. To install and setup OpenFace, please refer to the OpenFace guide in this [link](http://cmusatyalab.github.io/openface/). However, OpenFace is pre-installed with the [GIoTTO] (http://cmu.buildingdepot.org/BuildingDepot.tar.gz) distribution as a docker container. You can access Openface in this folder /srv/openface. Nevertheless, Openface can be installed on any server, but make sure to update the proper changes to reach the server ip/domain in the code.\r\n\r\n# Generating Google Now cards\r\nCurrently, the Google Now API is not avialable for public. You need to [whitelist your email with Google](https://support.google.com/a/answer/60751?hl=en) to be ble to access their Now API. Then, you need to create an account with Google developer if you don't have one already. Once you register, you will receive a client id and a client secret tokens. Those go into ```client_id``` and ```client_secret``` parementers in the [client_secret.json file](./client_secret.json). You will need to request and access token and replace any ```access_token``` instance in the files: [makeCard.py](./makeCard.py). To get an access token, you just need to put your credentials in [refreshtoken.py](./refreshtoken.py) file. Google cards in this demo contains actions buttons (e.g., call and send SMS). Some of these actions require background processing, which we provide in an Android app in this folder [AndroidDLApp](./AndroidDLApp). To succesfuly generate cards on a Google-whitelisted account, all card actions/conditions must be satisfied. Hence, you need to install this app on the mobile device participating in the demo. No need to run it though.\r\n\r\n# Running the demo\r\n+ Make sure the the TI sensor tag is runing and the green light is flashing\r\n+ Turn on the raspberry pi serving to the TI sensor tag and make sure that it is conneced to the internet (wired or wireless)\r\n+ Run [virtualSensorMonitor.py](./virtual_sensor/virtualSensorMonitor.py)\r\n+ Make sure that the camera is connected to the Internet.\r\n+ Connect to the GIoTTO platform (i.e., server running BuildingDepot) and run the following commands:\r\n```python\r\nservice docker restart\r\ndocker run -p 9000:9000 -p 8000:8000 -v /srv/buildingdepot/Documentation/build/html/:/var/www/html -t -i bamos/openface /bin/bash\r\n```\r\n+ Go to cd ./knocking\r\n+ Run ./knocking.py\r\n+ Enjoy the demo\r\n\r\n# Licensing\r\nUnless otherwise stated, the source code and trained Torch and Python\r\nmodel files are copyright Carnegie Mellon University and licensed\r\nunder the [Apache 2.0 License](./LICENSE).\r\nPortions from the following third party sources have\r\nbeen modified and are included in this repository.\r\nThese portions are noted in the source files and are\r\ncopyright their respective authors with\r\nthe licenses listed.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}